
TODO:
 * reimplement the config.py / .config mechanism.  i'd like for many commands
   to share very similar argument or argument sets, as well as have some
   common config options.  I'm not sure the best way to do this.
    
	 - features of config.py
	 	* parse arguments and return an object with attributes equal to the
		  parser values.
		* maintain values consistently across modules at run time.
		* have default values that are not specified at each run time.
		* easy to import and use

	 - config module is available via 'import config' or as returned by
	   	  parsermodule.parse_args()
     - python supports load-once modules, so subsequent imports refer to the
          same module object.
	   

 * Find a better location to place and pull the PKL files currently in the pdb
   directory.  Ultimately, these should be stored in a real DB.  Until then,
   they should sit in a location that is accessible from the www scripts,
   backend scripts, and user utilities.

 * clean up plc.py; there's a lot of redundent code.

 * figure out python paths for user commands.
   - directories for pickle files.
   - add user in rpm install
   - user permissions for data files for day-to-day operations.

 * fix BayTechCtrlCUnibe expect script.

Lower priority:
 * Add a more structured, 'automate' library of scripts and means of making
   batch calls, etc.

 * add a third package for user tools that will interact with the Monitor
   service.  Mostly, I'm guessing this would be queries for the live status of
   nodes and a more reliable 'reboot' and 'reinstall' mechanism than currently
   availble with PLC.

Done:
 * pull out global configuration information from various files, like rt_db,
   mailer.py,  auth.py, and any others.  Create a single configuration file
   from which all others pull.

   - convert plc and other files to use the new monitorconfig.py rather than
     auth, or plc.*
   - need to alter all import 'auth' statements.
